package com.blocker.wrapper;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class CrowdFunding extends Contract {
    public static final String BINARY = "0x6080604052600061001d6100c0640100000000026401000000009004565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100c8565b600033905090565b61310b806100d76000396000f3fe6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806324dcb72f146100d55780632b564898146100fe578063458a3b0014610140578063532a748e1461017d578063801da98e146101ba5780638da5cb5b146101e3578063920fb1591461020e57806393fa5ec614610237578063af526b2f14610260578063cc075e0914610289578063edf4a583146102b2578063f102a67c146102f1578063f8b2cb4f1461031a578063ffdd5cf114610357575b600080fd5b3480156100e157600080fd5b506100fc60048036036100f79190810190612732565b610397565b005b34801561010a57600080fd5b506101256004803603610120919081019061287f565b610587565b60405161013796959493929190612da9565b60405180910390f35b34801561014c57600080fd5b506101676004803603610162919081019061283e565b610739565b6040516101749190612d65565b60405180910390f35b34801561018957600080fd5b506101a4600480360361019f919081019061283e565b610890565b6040516101b19190612e91565b60405180910390f35b3480156101c657600080fd5b506101e160048036036101dc9190810190612786565b61090b565b005b3480156101ef57600080fd5b506101f8610bce565b6040516102059190612cac565b60405180910390f35b34801561021a57600080fd5b5061023560048036036102309190810190612a12565b610bf7565b005b34801561024357600080fd5b5061025e600480360361025991908101906126b7565b610d9d565b005b34801561026c57600080fd5b5061028760048036036102829190810190612732565b61131f565b005b34801561029557600080fd5b506102b060048036036102ab919081019061293f565b61159d565b005b3480156102be57600080fd5b506102d960048036036102d491908101906128d3565b6118fa565b6040516102e893929190612eac565b60405180910390f35b3480156102fd57600080fd5b50610318600480360361031391908101906129be565b6119f3565b005b34801561032657600080fd5b50610341600480360361033c919081019061268e565b611fb1565b60405161034e9190612e91565b60405180910390f35b34801561036357600080fd5b5061037e6004803603610379919081019061268e565b61205f565b60405161038e9493929190612ee3565b60405180910390f35b60006005826040518082805190602001908083835b6020831015156103d157805182526020820191506020810190506020830392506103ac565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090506001600481111561041357fe5b8160060160009054906101000a900460ff16600481111561043057fe5b14151561043c57600080fd5b806003015481600201541115151561045357600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600301546040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104d2929190612d3c565b602060405180830381600087803b1580156104ec57600080fd5b505af1158015610500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105249190810190612815565b5060028160060160006101000a81548160ff0219169083600481111561054657fe5b02179055507f1f747251ecd96060609f566d19c5e17f3ee0a54d4341d90141a6797579fa96e28260405161057a9190612d87565b60405180910390a1505050565b60606000806000806000806005896040518082805190602001908083835b6020831015156105ca57805182526020820191506020810190506020830392506105a5565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209050806000018160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826002015483600301548460040160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548560060160009054906101000a900460ff16858054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561071b5780601f106106f05761010080835404028352916020019161071b565b820191906000526020600020905b8154815290600101906020018083116106fe57829003601f168201915b50505050509550965096509650965096509650509295509295509295565b60606005826040518082805190602001908083835b602083101515610773578051825260208201915060208101905060208303925061074e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600d01805480602002602001604051908101604052809291908181526020016000905b82821015610885578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108715780601f1061084657610100808354040283529160200191610871565b820191906000526020600020905b81548152906001019060200180831161085457829003601f168201915b5050505050815260200190600101906107c9565b505050509050919050565b60006005826040518082805190602001908083835b6020831015156108ca57805182526020820191506020810190506020830392506108a5565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501805490509050919050565b610913612174565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099a90612e71565b60405180910390fd5b60006005856040518082805190602001908083835b6020831015156109dd57805182526020820191506020810190506020830392506109b8565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060036004811115610a1f57fe5b8160060160009054906101000a900460ff166004811115610a3c57fe5b141515610a4857600080fd5b828160090160008282540192505081905550600083830290508673ffffffffffffffffffffffffffffffffffffffff16633b66aad18630846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610aba93929190612d05565b602060405180830381600087803b158015610ad457600080fd5b505af1158015610ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b0c9190810190612815565b508673ffffffffffffffffffffffffffffffffffffffff166323b872dd8630846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b6693929190612d05565b602060405180830381600087803b158015610b8057600080fd5b505af1158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bb89190810190612815565b50610bc58787868661217c565b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006005846040518082805190602001908083835b602083101515610c315780518252602082019150602081019050602083039250610c0c565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060026004811115610c7357fe5b8160060160009054906101000a900460ff166004811115610c9057fe5b141515610c9c57600080fd5b6000816009018190555060038160060160006101000a81548160ff02191690836004811115610cc757fe5b021790555082816008018190555081816007019080519060200190610ced929190612543565b506001600360008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fd0345c60aa523ca74849e7d52af95b50033744469eb1e1c230f1958ec6346bc884604051610d8f9190612d87565b60405180910390a150505050565b60006005836040518082805190602001908083835b602083101515610dd75780518252602082019150602081019050602083039250610db2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e4f612174565b73ffffffffffffffffffffffffffffffffffffffff1614151515610ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9f90612e51565b60405180910390fd5b60016004811115610eb557fe5b8160060160009054906101000a900460ff166004811115610ed257fe5b141515610f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0b90612e31565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16633b66aad18530856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f6d93929190612d05565b602060405180830381600087803b158015610f8757600080fd5b505af1158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fbf9190810190612815565b508473ffffffffffffffffffffffffffffffffffffffff166323b872dd8530856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161101993929190612d05565b602060405180830381600087803b15801561103357600080fd5b505af1158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061106b9190810190612815565b506005836040518082805190602001908083835b6020831015156110a4578051825260208201915060208101905060208303925061107f565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206005016110e2612174565b90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050816005846040518082805190602001908083835b60208310151561117e5780518252602082019150602081019050602083039250611159565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008282540192505081905550816005846040518082805190602001908083835b6020831015156111fa57805182526020820191506020810190506020830392506111d5565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600401600061123a612174565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060016002600061128f612174565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fc01ee4a877a9698da7c64514cb5fcb9c1e110a3be7ac3f0fd717d83a9ae95b636112ff612174565b848460405161131093929190612cc7565b60405180910390a15050505050565b60006005826040518082805190602001908083835b6020831015156113595780518252602082019150602081019050602083039250611334565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090506001600481111561139b57fe5b8160060160009054906101000a900460ff1660048111156113b857fe5b1415156113c457600080fd5b806002015481600301541015156113da57600080fd5b600081600501805490509050600080905060008090505b82811015611538576000846005018380600101945081548110151561141257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb828760040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114d7929190612d3c565b602060405180830381600087803b1580156114f157600080fd5b505af1158015611505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115299190810190612815565b505080806001019150506113f1565b5060028360060160006101000a81548160ff0219169083600481111561155a57fe5b02179055507f7df70f52aad14ff64c7ace761306e9d698d2b1f43ba53f9cc1137a975b951c368460405161158e9190612d87565b60405180910390a15050505050565b6005836040518082805190602001908083835b6020831015156115d557805182526020820191506020810190506020830392506115b0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661164a612174565b73ffffffffffffffffffffffffffffffffffffffff1614151561166c57600080fd5b806005846040518082805190602001908083835b6020831015156116a55780518252602082019150602081019050602083039250611680565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600a01836040518082805190602001908083835b60208310151561171157805182526020820191506020810190506020830392506116ec565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000828254019250508190555060016005846040518082805190602001908083835b60208310151561178b5780518252602082019150602081019050602083039250611766565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600c0160008282540192505081905550806005846040518082805190602001908083835b60208310151561180757805182526020820191506020810190506020830392506117e2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600b01600082825401925050819055506005836040518082805190602001908083835b602083101515611882578051825260208201915060208101905060208303925061185d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600d018290806001815401808255809150509060018203906000526020600020016000909192909190915090805190602001906118f3929190612543565b5050505050565b6000806000806005866040518082805190602001908083835b6020831015156119385780518252602082019150602081019050602083039250611913565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905080600a01856040518082805190602001908083835b6020831015156119a75780518252602082019150602081019050602083039250611982565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205481600c015482600b0154935093509350509250925092565b60006004811115611a0057fe5b6005836040518082805190602001908083835b602083101515611a385780518252602082019150602081019050602083039250611a13565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060060160009054906101000a900460ff166004811115611a8757fe5b141515611ac9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac090612e11565b60405180910390fd5b816005836040518082805190602001908083835b602083101515611b025780518252602082019150602081019050602083039250611add565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000019080519060200190611b4b929190612543565b50611b54612174565b6005836040518082805190602001908083835b602083101515611b8c5780518252602082019150602081019050602083039250611b67565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806005836040518082805190602001908083835b602083101515611c395780518252602082019150602081019050602083039250611c14565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002018190555060006005836040518082805190602001908083835b602083101515611cad5780518252602082019150602081019050602083039250611c88565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206003018190555060006005836040518082805190602001908083835b602083101515611d215780518252602082019150602081019050602083039250611cfc565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004016000611d61612174565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016005836040518082805190602001908083835b602083101515611dd95780518252602082019150602081019050602083039250611db4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060060160006101000a81548160ff02191690836004811115611e2a57fe5b021790555060006005836040518082805190602001908083835b602083101515611e695780518252602082019150602081019050602083039250611e44565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600b018190555060006005836040518082805190602001908083835b602083101515611edd5780518252602082019150602081019050602083039250611eb8565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600c01819055506001806000611f24612174565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f041828d7f84528c56a0f45c878fe07d22cabe6a744c0fe0a3d74d38a069bd044611f94612174565b8383604051611fa593929190612cc7565b60405180910390a15050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120089190612cac565b60206040518083038186803b15801561202057600080fd5b505afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120589190810190612a91565b9050919050565b600080600080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493509350935093509193509193565b600033905090565b60006005846040518082805190602001908083835b6020831015156121b65780518252602082019150602081019050602083039250612191565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060608160050180548060200260200160405190810160405280929190818152602001828054801561227157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612227575b50505050509050600081519050600085850290508773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166064603285028115156122d557fe5b046040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161230f929190612d3c565b602060405180830381600087803b15801561232957600080fd5b505af115801561233d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123619190810190612815565b50600060646032830281151561237357fe5b04905060008090505b83811015612537576000858281518110151561239457fe5b906020019060200201519050600087600301548860040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485028115156123f457fe5b0490508b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161244e929190612d3c565b602060405180830381600087803b15801561246857600080fd5b505af115801561247c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124a09190810190612815565b506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fc1d32ad5cca423e7dda2123dbf8c482f8e77d00b631c06e903a47f2cec1334df8282604051612520929190612d3c565b60405180910390a15050808060010191505061237c565b50505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061258457805160ff19168380011785556125b2565b828001600101855582156125b2579182015b828111156125b1578251825591602001919060010190612596565b5b5090506125bf91906125c3565b5090565b6125e591905b808211156125e15760008160009055506001016125c9565b5090565b90565b60006125f4823561300e565b905092915050565b60006126088251613020565b905092915050565b600082601f830112151561262357600080fd5b813561263661263182612f55565b612f28565b9150808252602083016020830185838301111561265257600080fd5b61265d83828461307e565b50505092915050565b6000612672823561302c565b905092915050565b6000612686825161302c565b905092915050565b6000602082840312156126a057600080fd5b60006126ae848285016125e8565b91505092915050565b600080600080608085870312156126cd57600080fd5b60006126db878288016125e8565b94505060206126ec878288016125e8565b935050604085013567ffffffffffffffff81111561270957600080fd5b61271587828801612610565b925050606061272687828801612666565b91505092959194509250565b6000806040838503121561274557600080fd5b6000612753858286016125e8565b925050602083013567ffffffffffffffff81111561277057600080fd5b61277c85828601612610565b9150509250929050565b600080600080600060a0868803121561279e57600080fd5b60006127ac888289016125e8565b955050602086013567ffffffffffffffff8111156127c957600080fd5b6127d588828901612610565b94505060406127e6888289016125e8565b93505060606127f788828901612666565b925050608061280888828901612666565b9150509295509295909350565b60006020828403121561282757600080fd5b6000612835848285016125fc565b91505092915050565b60006020828403121561285057600080fd5b600082013567ffffffffffffffff81111561286a57600080fd5b61287684828501612610565b91505092915050565b6000806040838503121561289257600080fd5b600083013567ffffffffffffffff8111156128ac57600080fd5b6128b885828601612610565b92505060206128c9858286016125e8565b9150509250929050565b600080604083850312156128e657600080fd5b600083013567ffffffffffffffff81111561290057600080fd5b61290c85828601612610565b925050602083013567ffffffffffffffff81111561292957600080fd5b61293585828601612610565b9150509250929050565b60008060006060848603121561295457600080fd5b600084013567ffffffffffffffff81111561296e57600080fd5b61297a86828701612610565b935050602084013567ffffffffffffffff81111561299757600080fd5b6129a386828701612610565b92505060406129b486828701612666565b9150509250925092565b600080604083850312156129d157600080fd5b600083013567ffffffffffffffff8111156129eb57600080fd5b6129f785828601612610565b9250506020612a0885828601612666565b9150509250929050565b600080600060608486031215612a2757600080fd5b600084013567ffffffffffffffff811115612a4157600080fd5b612a4d86828701612610565b9350506020612a5e86828701612666565b925050604084013567ffffffffffffffff811115612a7b57600080fd5b612a8786828701612610565b9150509250925092565b600060208284031215612aa357600080fd5b6000612ab18482850161267a565b91505092915050565b612ac381613036565b82525050565b612ad281612fbc565b82525050565b6000612ae382612f8e565b80845260208401935083602082028501612afc85612f81565b60005b84811015612b35578383038852612b17838351612b8b565b9250612b2282612faf565b9150602088019750600181019050612aff565b508196508694505050505092915050565b612b4f81613048565b82525050565b6000612b6082612fa4565b808452612b7481602086016020860161308d565b612b7d816130c0565b602085010191505092915050565b6000612b9682612f99565b808452612baa81602086016020860161308d565b612bb3816130c0565b602085010191505092915050565b6000600782527f69734578697374000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601482527f706c65617365206d616b652063616d706169676e0000000000000000000000006020830152604082019050919050565b6000600f82527f796f75206172652063726561746f7200000000000000000000000000000000006020830152604082019050919050565b6000602082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726020830152604082019050919050565b612ca681613004565b82525050565b6000602082019050612cc16000830184612ac9565b92915050565b6000606082019050612cdc6000830186612aba565b8181036020830152612cee8185612b55565b9050612cfd6040830184612c9d565b949350505050565b6000606082019050612d1a6000830186612ac9565b612d276020830185612ac9565b612d346040830184612c9d565b949350505050565b6000604082019050612d516000830185612ac9565b612d5e6020830184612c9d565b9392505050565b60006020820190508181036000830152612d7f8184612ad8565b905092915050565b60006020820190508181036000830152612da18184612b55565b905092915050565b600060c0820190508181036000830152612dc38189612b55565b9050612dd26020830188612ac9565b612ddf6040830187612c9d565b612dec6060830186612c9d565b612df96080830185612c9d565b612e0660a0830184612b46565b979650505050505050565b60006020820190508181036000830152612e2a81612bc1565b9050919050565b60006020820190508181036000830152612e4a81612bf8565b9050919050565b60006020820190508181036000830152612e6a81612c2f565b9050919050565b60006020820190508181036000830152612e8a81612c66565b9050919050565b6000602082019050612ea66000830184612c9d565b92915050565b6000606082019050612ec16000830186612c9d565b612ece6020830185612c9d565b612edb6040830184612c9d565b949350505050565b6000608082019050612ef86000830187612c9d565b612f056020830186612c9d565b612f126040830185612c9d565b612f1f6060830184612c9d565b95945050505050565b6000604051905081810181811067ffffffffffffffff82111715612f4b57600080fd5b8060405250919050565b600067ffffffffffffffff821115612f6c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000612fc782612fe4565b9050919050565b6000600582101515612fdc57fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061301982612fe4565b9050919050565b60008115159050919050565b6000819050919050565b60006130418261305a565b9050919050565b600061305382612fce565b9050919050565b60006130658261306c565b9050919050565b600061307782612fe4565b9050919050565b82818337600083830152505050565b60005b838110156130ab578082015181840152602081019050613090565b838111156130ba576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a7230582096892d2614fda9feaaa0a8741c03cd244cab74aa1400dee176ad1bf1b076ffd66c6578706572696d656e74616cf50037";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_CREATECAMPAIGN = "createCampaign";

    public static final String FUNC_FUNDINGCAMPIGN = "FundingCampign";

    public static final String FUNC_RECEIVEFUNDS = "receiveFunds";

    public static final String FUNC_REFUND = "Refund";

    public static final String FUNC_CREATESALE = "createSale";

    public static final String FUNC_SALEITEM = "SaleItem";

    public static final String FUNC_GETINFO = "getInfo";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETCAMPAIGN = "getCampaign";

    public static final String FUNC_GETPEOPLENUM = "getPeopleNum";

    public static final String FUNC_USEFUND = "usefund";

    public static final String FUNC_GETUSED = "getUsed";

    public static final String FUNC_GETRECEIPTIMG = "getReceiptImg";

    public static final Event CAMPAIGNCREATE_EVENT = new Event("CampaignCreate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FUNDING_EVENT = new Event("Funding", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FUNDINGSUCCESS_EVENT = new Event("FundingSuccess", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event FUNDINGFAIL_EVENT = new Event("FundingFail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DISTRIBUTE_EVENT = new Event("Distribute", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CREATESALE_EVENT = new Event("CreateSale", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected CrowdFunding(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CrowdFunding(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CrowdFunding(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CrowdFunding(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<CampaignCreateEventResponse> getCampaignCreateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CAMPAIGNCREATE_EVENT, transactionReceipt);
        ArrayList<CampaignCreateEventResponse> responses = new ArrayList<CampaignCreateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CampaignCreateEventResponse typedResponse = new CampaignCreateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CampaignCreateEventResponse> campaignCreateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CampaignCreateEventResponse>() {
            @Override
            public CampaignCreateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CAMPAIGNCREATE_EVENT, log);
                CampaignCreateEventResponse typedResponse = new CampaignCreateEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CampaignCreateEventResponse> campaignCreateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CAMPAIGNCREATE_EVENT));
        return campaignCreateEventFlowable(filter);
    }

    public List<FundingEventResponse> getFundingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDING_EVENT, transactionReceipt);
        ArrayList<FundingEventResponse> responses = new ArrayList<FundingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingEventResponse typedResponse = new FundingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingEventResponse> fundingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingEventResponse>() {
            @Override
            public FundingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDING_EVENT, log);
                FundingEventResponse typedResponse = new FundingEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingEventResponse> fundingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDING_EVENT));
        return fundingEventFlowable(filter);
    }

    public List<FundingSuccessEventResponse> getFundingSuccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDINGSUCCESS_EVENT, transactionReceipt);
        ArrayList<FundingSuccessEventResponse> responses = new ArrayList<FundingSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingSuccessEventResponse typedResponse = new FundingSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingSuccessEventResponse> fundingSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingSuccessEventResponse>() {
            @Override
            public FundingSuccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDINGSUCCESS_EVENT, log);
                FundingSuccessEventResponse typedResponse = new FundingSuccessEventResponse();
                typedResponse.log = log;
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingSuccessEventResponse> fundingSuccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDINGSUCCESS_EVENT));
        return fundingSuccessEventFlowable(filter);
    }

    public List<FundingFailEventResponse> getFundingFailEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDINGFAIL_EVENT, transactionReceipt);
        ArrayList<FundingFailEventResponse> responses = new ArrayList<FundingFailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingFailEventResponse typedResponse = new FundingFailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingFailEventResponse> fundingFailEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingFailEventResponse>() {
            @Override
            public FundingFailEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDINGFAIL_EVENT, log);
                FundingFailEventResponse typedResponse = new FundingFailEventResponse();
                typedResponse.log = log;
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingFailEventResponse> fundingFailEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDINGFAIL_EVENT));
        return fundingFailEventFlowable(filter);
    }

    public List<DistributeEventResponse> getDistributeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DISTRIBUTE_EVENT, transactionReceipt);
        ArrayList<DistributeEventResponse> responses = new ArrayList<DistributeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DistributeEventResponse typedResponse = new DistributeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DistributeEventResponse> distributeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DistributeEventResponse>() {
            @Override
            public DistributeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DISTRIBUTE_EVENT, log);
                DistributeEventResponse typedResponse = new DistributeEventResponse();
                typedResponse.log = log;
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DistributeEventResponse> distributeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DISTRIBUTE_EVENT));
        return distributeEventFlowable(filter);
    }

    public List<CreateSaleEventResponse> getCreateSaleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATESALE_EVENT, transactionReceipt);
        ArrayList<CreateSaleEventResponse> responses = new ArrayList<CreateSaleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateSaleEventResponse typedResponse = new CreateSaleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateSaleEventResponse> createSaleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CreateSaleEventResponse>() {
            @Override
            public CreateSaleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATESALE_EVENT, log);
                CreateSaleEventResponse typedResponse = new CreateSaleEventResponse();
                typedResponse.log = log;
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreateSaleEventResponse> createSaleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATESALE_EVENT));
        return createSaleEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createCampaign(String _uniqueCode, BigInteger _fundingGoal) {
        final Function function = new Function(
                FUNC_CREATECAMPAIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_fundingGoal)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> FundingCampign(String _tokenAddress, String _from, String _uniqueCode, BigInteger _fundingValue) {
        final Function function = new Function(
                FUNC_FUNDINGCAMPIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_fundingValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receiveFunds(String _tokenAddress, String _uniqueCode) {
        final Function function = new Function(
                FUNC_RECEIVEFUNDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> Refund(String _tokenAddress, String _uniqueCode) {
        final Function function = new Function(
                FUNC_REFUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createSale(String _uniqueCode, BigInteger _money, String _image) {
        final Function function = new Function(
                FUNC_CREATESALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_money), 
                new org.web3j.abi.datatypes.Utf8String(_image)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> SaleItem(String _tokenAddress, String _uniqueCode, String buyer, BigInteger _count, BigInteger _money) {
        final Function function = new Function(
                FUNC_SALEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Address(buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_count), 
                new org.web3j.abi.datatypes.generated.Uint256(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getInfo(String target) {
        final Function function = new Function(FUNC_GETINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(target)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getBalance(String _tokenAddress) {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>> getCampaign(String _uniqueCode, String target) {
        final Function function = new Function(FUNC_GETCAMPAIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Address(target)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getPeopleNum(String _uniqueCode) {
        final Function function = new Function(FUNC_GETPEOPLENUM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> usefund(String _uniqueCode, String _imgName, BigInteger pay) {
        final Function function = new Function(
                FUNC_USEFUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Utf8String(_imgName), 
                new org.web3j.abi.datatypes.generated.Uint256(pay)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> getUsed(String _uniqueCode, String _imgName) {
        final Function function = new Function(FUNC_GETUSED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Utf8String(_imgName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getReceiptImg(String _uniqueCode) {
        final Function function = new Function(FUNC_GETRECEIPTIMG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static CrowdFunding load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrowdFunding(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CrowdFunding load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrowdFunding(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CrowdFunding load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CrowdFunding(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CrowdFunding load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CrowdFunding(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CrowdFunding.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CrowdFunding.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CrowdFunding.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CrowdFunding.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class CampaignCreateEventResponse extends BaseEventResponse {
        public String from;

        public String code;

        public BigInteger amount;
    }

    public static class FundingEventResponse extends BaseEventResponse {
        public String from;

        public String code;

        public BigInteger amount;
    }

    public static class FundingSuccessEventResponse extends BaseEventResponse {
        public String code;
    }

    public static class FundingFailEventResponse extends BaseEventResponse {
        public String code;
    }

    public static class DistributeEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger amount;
    }

    public static class CreateSaleEventResponse extends BaseEventResponse {
        public String code;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
