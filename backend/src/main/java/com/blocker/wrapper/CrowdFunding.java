package com.blocker.wrapper;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class CrowdFunding extends Contract {
    public static final String BINARY = "0x6080604052600061001d6100c0640100000000026401000000009004565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100c8565b600033905090565b612c2f806100d76000396000f3fe6080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806324dcb72f146100bf5780633020580b146101a757806338cc48311461028357806352bf36ec146102da578063532a748e1461047857806354722da8146105545780638da5cb5b1461065057806393fa5ec6146106a7578063af526b2f146107b9578063cc075e09146108a1578063f8b2cb4f14610a0a578063f9fbd55414610a6f575b600080fd5b3480156100cb57600080fd5b506101a5600480360360408110156100e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561011f57600080fd5b82018360208201111561013157600080fd5b8035906020019184600183028401116401000000008311171561015357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b4f565b005b3480156101b357600080fd5b50610281600480360360608110156101ca57600080fd5b81019080803590602001906401000000008111156101e757600080fd5b8201836020820111156101f957600080fd5b8035906020019184600183028401116401000000008311171561021b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610e3e565b005b34801561028f57600080fd5b5061029861148a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102e657600080fd5b506103a0600480360360208110156102fd57600080fd5b810190808035906020019064010000000081111561031a57600080fd5b82018360208201111561032c57600080fd5b8035906020019184600183028401116401000000008311171561034e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611492565b60405180806020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018360048111156103f857fe5b60ff168152602001828103825288818151815260200191508051906020019080838360005b8381101561043857808201518184015260208101905061041d565b50505050905090810190601f1680156104655780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561048457600080fd5b5061053e6004803603602081101561049b57600080fd5b81019080803590602001906401000000008111156104b857600080fd5b8201836020820111156104ca57600080fd5b803590602001918460018302840111640100000000831117156104ec57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061164a565b6040518082815260200191505060405180910390f35b34801561056057600080fd5b5061064e6004803603608081101561057757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156105b457600080fd5b8201836020820111156105c657600080fd5b803590602001918460018302840111640100000000831117156105e857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001909291905050506116c5565b005b34801561065c57600080fd5b5061066561185a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106b357600080fd5b506107b7600480360360808110156106ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561072757600080fd5b82018360208201111561073957600080fd5b8035906020019184600183028401116401000000008311171561075b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611883565b005b3480156107c557600080fd5b5061089f600480360360408110156107dc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561081957600080fd5b82018360208201111561082b57600080fd5b8035906020019184600183028401116401000000008311171561084d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f81565b005b3480156108ad57600080fd5b50610a08600480360360608110156108c457600080fd5b81019080803590602001906401000000008111156108e157600080fd5b8201836020820111156108f357600080fd5b8035906020019184600183028401116401000000008311171561091557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561097857600080fd5b82018360208201111561098a57600080fd5b803590602001918460018302840111640100000000831117156109ac57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050612299565b005b348015610a1657600080fd5b50610a5960048036036020811015610a2d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125ea565b6040518082815260200191505060405180910390f35b348015610a7b57600080fd5b50610b3560048036036020811015610a9257600080fd5b8101908080359060200190640100000000811115610aaf57600080fd5b820183602082011115610ac157600080fd5b80359060200191846001830284011164010000000083111715610ae357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506126c7565b604051808215151515815260200191505060405180910390f35b60006001826040518082805190602001908083835b602083101515610b895780518252602082019150602081019050602083039250610b64565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060016004811115610bcb57fe5b8160070160009054906101000a900460ff166004811115610be857fe5b141515610bf457600080fd5b8060030154816002015411151515610c0b57600080fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c4e612741565b73ffffffffffffffffffffffffffffffffffffffff16141515610c7057600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600301546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d3b57600080fd5b505af1158015610d4f573d6000803e3d6000fd5b505050506040513d6020811015610d6557600080fd5b81019080805190602001909291905050505060038160070160006101000a81548160ff02191690836004811115610d9857fe5b02179055507f1f747251ecd96060609f566d19c5e17f3ee0a54d4341d90141a6797579fa96e2826040518080602001828103825283818151815260200191508051906020019080838360005b83811015610dff578082015181840152602081019050610de4565b50505050905090810190601f168015610e2c5780820380516001836020036101000a031916815260200191505b509250505060405180910390a1505050565b60016004811115610e4b57fe5b6001846040518082805190602001908083835b602083101515610e835780518252602082019150602081019050602083039250610e5e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160009054906101000a900460ff166004811115610ed257fe5b14151515610edf57600080fd5b826001846040518082805190602001908083835b602083101515610f185780518252602082019150602081019050602083039250610ef3565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000019080519060200190610f61929190612b5e565b50610f6a612741565b6001846040518082805190602001908083835b602083101515610fa25780518252602082019150602081019050602083039250610f7d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816001846040518082805190602001908083835b60208310151561104f578051825260208201915060208101905060208303925061102a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002018190555060006001846040518082805190602001908083835b6020831015156110c3578051825260208201915060208101905060208303925061109e565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206003018190555060006001846040518082805190602001908083835b6020831015156111375780518252602082019150602081019050602083039250611112565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004016000611177612741565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062015180810242016001846040518082805190602001908083835b6020831015156111f557805182526020820191506020810190506020830392506111d0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060060181905550600180846040518082805190602001908083835b6020831015156112685780518252602082019150602081019050602083039250611243565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160006101000a81548160ff021916908360048111156112b957fe5b021790555060006001846040518082805190602001908083835b6020831015156112f857805182526020820191506020810190506020830392506112d3565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600a018190555060006001846040518082805190602001908083835b60208310151561136c5780518252602082019150602081019050602083039250611347565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600b01819055507f041828d7f84528c56a0f45c878fe07d22cabe6a744c0fe0a3d74d38a069bd0446113cf612741565b8484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561144957808201518184015260208101905061142e565b50505050905090810190601f1680156114765780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1505050565b600030905090565b60606000806000806000806001886040518082805190602001908083835b6020831015156114d557805182526020820191506020810190506020830392506114b0565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209050806000018160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260020154836003015484600401600061154b612741565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548560070160009054906101000a900460ff16858054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561162d5780601f106116025761010080835404028352916020019161162d565b820191906000526020600020905b81548152906001019060200180831161161057829003601f168201915b505050505095509650965096509650965096505091939550919395565b60006001826040518082805190602001908083835b602083101515611684578051825260208201915060208101905060208303925061165f565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501805490509050919050565b6116cd612741565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611790576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60006001846040518082805190602001908083835b6020831015156117ca57805182526020820191506020810190506020830392506117a5565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090506003600481111561180c57fe5b8160070160009054906101000a900460ff16600481111561182957fe5b14151561183557600080fd5b82816008016000828254019250508190555061185385858585612749565b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001836040518082805190602001908083835b6020831015156118bd5780518252602082019150602081019050602083039250611898565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611935612741565b73ffffffffffffffffffffffffffffffffffffffff16141515156119c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f796f75206172652063726561746f72000000000000000000000000000000000081525060200191505060405180910390fd5b600160048111156119ce57fe5b8160070160009054906101000a900460ff1660048111156119eb57fe5b141515611a60576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f706c65617365206d616b652063616d706169676e00000000000000000000000081525060200191505060405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16633b66aad18530856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611b3757600080fd5b505af1158015611b4b573d6000803e3d6000fd5b505050506040513d6020811015611b6157600080fd5b8101908080519060200190929190505050508473ffffffffffffffffffffffffffffffffffffffff166323b872dd8530856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611c4a57600080fd5b505af1158015611c5e573d6000803e3d6000fd5b505050506040513d6020811015611c7457600080fd5b8101908080519060200190929190505050506001836040518082805190602001908083835b602083101515611cbe5780518252602082019150602081019050602083039250611c99565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501611cfc612741565b90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050816001846040518082805190602001908083835b602083101515611d985780518252602082019150602081019050602083039250611d73565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008282540192505081905550816001846040518082805190602001908083835b602083101515611e145780518252602082019150602081019050602083039250611def565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004016000611e54612741565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fc01ee4a877a9698da7c64514cb5fcb9c1e110a3be7ac3f0fd717d83a9ae95b63611ec4612741565b8484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611f3e578082015181840152602081019050611f23565b50505050905090810190601f168015611f6b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050505050565b60006001826040518082805190602001908083835b602083101515611fbb5780518252602082019150602081019050602083039250611f96565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060016004811115611ffd57fe5b8160070160009054906101000a900460ff16600481111561201a57fe5b14151561202657600080fd5b8060020154816003015410151561203c57600080fd5b600081600501805490509050600080905060008090505b828110156121cf576000846005018380600101945081548110151561207457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb828760040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561218557600080fd5b505af1158015612199573d6000803e3d6000fd5b505050506040513d60208110156121af57600080fd5b810190808051906020019092919050505050508080600101915050612053565b5060028360070160006101000a81548160ff021916908360048111156121f157fe5b02179055507f7df70f52aad14ff64c7ace761306e9d698d2b1f43ba53f9cc1137a975b951c36846040518080602001828103825283818151815260200191508051906020019080838360005b8381101561225857808201518184015260208101905061223d565b50505050905090810190601f1680156122855780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050505050565b600360048111156122a657fe5b6001846040518082805190602001908083835b6020831015156122de57805182526020820191506020810190506020830392506122b9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160009054906101000a900460ff16600481111561232d57fe5b14151561233957600080fd5b6001836040518082805190602001908083835b602083101515612371578051825260208201915060208101905060208303925061234c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123e6612741565b73ffffffffffffffffffffffffffffffffffffffff1614151561240857600080fd5b806001846040518082805190602001908083835b602083101515612441578051825260208201915060208101905060208303925061241c565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600901836040518082805190602001908083835b6020831015156124ad5780518252602082019150602081019050602083039250612488565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008282540192505081905550600180846040518082805190602001908083835b6020831015156125265780518252602082019150602081019050602083039250612501565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600b0160008282540192505081905550806001846040518082805190602001908083835b6020831015156125a2578051825260208201915060208101905060208303925061257d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600a0160008282540192505081905550505050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561268557600080fd5b505afa158015612699573d6000803e3d6000fd5b505050506040513d60208110156126af57600080fd5b81019080805190602001909291905050509050919050565b6000806001836040518082805190602001908083835b60208310151561270257805182526020820191506020810190506020830392506126dd565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090506001915050919050565b600033905090565b60006001846040518082805190602001908083835b602083101515612783578051825260208201915060208101905060208303925061275e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060608160050180548060200260200160405190810160405280929190818152602001828054801561283e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116127f4575b50505050509050600081519050600085850290508773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166064603285028115156128a257fe5b046040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561292857600080fd5b505af115801561293c573d6000803e3d6000fd5b505050506040513d602081101561295257600080fd5b810190808051906020019092919050505050600060646032830281151561297557fe5b04905060008090505b83811015612b52576000858281518110151561299657fe5b906020019060200201519050600087600301548860040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548115156129f457fe5b04840290508b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612a9c57600080fd5b505af1158015612ab0573d6000803e3d6000fd5b505050506040513d6020811015612ac657600080fd5b8101908080519060200190929190505050507fc1d32ad5cca423e7dda2123dbf8c482f8e77d00b631c06e903a47f2cec1334df8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050808060010191505061297e565b50505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612b9f57805160ff1916838001178555612bcd565b82800160010185558215612bcd579182015b82811115612bcc578251825591602001919060010190612bb1565b5b509050612bda9190612bde565b5090565b612c0091905b80821115612bfc576000816000905550600101612be4565b5090565b9056fea165627a7a7230582079977c13950fca99adf800de57fa9538944a03bfe244394a7a319332dc63263a0029";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_CREATECAMPAIGN = "createCampaign";

    public static final String FUNC_FUNDINGCAMPIGN = "FundingCampign";

    public static final String FUNC_RECEIVEFUNDS = "receiveFunds";

    public static final String FUNC_REFUND = "Refund";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETCAMPAIGN = "getCampaign";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETPEOPLENUM = "getPeopleNum";

    public static final String FUNC_TEST = "test";

    public static final String FUNC_USEFUND = "usefund";

    public static final String FUNC_SALEITEM = "SaleItem";

    public static final Event CAMPAIGNCREATE_EVENT = new Event("CampaignCreate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FUNDING_EVENT = new Event("Funding", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FUNDINGSUCCESS_EVENT = new Event("FundingSuccess", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event FUNDINGFAIL_EVENT = new Event("FundingFail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DISTRIBUTE_EVENT = new Event("Distribute", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected CrowdFunding(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CrowdFunding(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CrowdFunding(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CrowdFunding(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<CampaignCreateEventResponse> getCampaignCreateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CAMPAIGNCREATE_EVENT, transactionReceipt);
        ArrayList<CampaignCreateEventResponse> responses = new ArrayList<CampaignCreateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CampaignCreateEventResponse typedResponse = new CampaignCreateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CampaignCreateEventResponse> campaignCreateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CampaignCreateEventResponse>() {
            @Override
            public CampaignCreateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CAMPAIGNCREATE_EVENT, log);
                CampaignCreateEventResponse typedResponse = new CampaignCreateEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CampaignCreateEventResponse> campaignCreateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CAMPAIGNCREATE_EVENT));
        return campaignCreateEventFlowable(filter);
    }

    public List<FundingEventResponse> getFundingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDING_EVENT, transactionReceipt);
        ArrayList<FundingEventResponse> responses = new ArrayList<FundingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingEventResponse typedResponse = new FundingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingEventResponse> fundingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingEventResponse>() {
            @Override
            public FundingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDING_EVENT, log);
                FundingEventResponse typedResponse = new FundingEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingEventResponse> fundingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDING_EVENT));
        return fundingEventFlowable(filter);
    }

    public List<FundingSuccessEventResponse> getFundingSuccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDINGSUCCESS_EVENT, transactionReceipt);
        ArrayList<FundingSuccessEventResponse> responses = new ArrayList<FundingSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingSuccessEventResponse typedResponse = new FundingSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingSuccessEventResponse> fundingSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingSuccessEventResponse>() {
            @Override
            public FundingSuccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDINGSUCCESS_EVENT, log);
                FundingSuccessEventResponse typedResponse = new FundingSuccessEventResponse();
                typedResponse.log = log;
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingSuccessEventResponse> fundingSuccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDINGSUCCESS_EVENT));
        return fundingSuccessEventFlowable(filter);
    }

    public List<FundingFailEventResponse> getFundingFailEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDINGFAIL_EVENT, transactionReceipt);
        ArrayList<FundingFailEventResponse> responses = new ArrayList<FundingFailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingFailEventResponse typedResponse = new FundingFailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingFailEventResponse> fundingFailEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingFailEventResponse>() {
            @Override
            public FundingFailEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDINGFAIL_EVENT, log);
                FundingFailEventResponse typedResponse = new FundingFailEventResponse();
                typedResponse.log = log;
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingFailEventResponse> fundingFailEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDINGFAIL_EVENT));
        return fundingFailEventFlowable(filter);
    }

    public List<DistributeEventResponse> getDistributeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DISTRIBUTE_EVENT, transactionReceipt);
        ArrayList<DistributeEventResponse> responses = new ArrayList<DistributeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DistributeEventResponse typedResponse = new DistributeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DistributeEventResponse> distributeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DistributeEventResponse>() {
            @Override
            public DistributeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DISTRIBUTE_EVENT, log);
                DistributeEventResponse typedResponse = new DistributeEventResponse();
                typedResponse.log = log;
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DistributeEventResponse> distributeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DISTRIBUTE_EVENT));
        return distributeEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createCampaign(String _uniqueCode, BigInteger _fundingGoal, BigInteger numberOfDays) {
        final Function function = new Function(
                FUNC_CREATECAMPAIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_fundingGoal), 
                new org.web3j.abi.datatypes.generated.Uint256(numberOfDays)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> FundingCampign(String _tokenAddress, String _from, String _uniqueCode, BigInteger _fundingValue) {
        final Function function = new Function(
                FUNC_FUNDINGCAMPIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_fundingValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receiveFunds(String _tokenAddress, String _uniqueCode) {
        final Function function = new Function(
                FUNC_RECEIVEFUNDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> Refund(String _tokenAddress, String _uniqueCode) {
        final Function function = new Function(
                FUNC_REFUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getBalance(String _tokenAddress) {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>> getCampaign(String _uniqueCode) {
        final Function function = new Function(FUNC_GETCAMPAIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> getAddress() {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getPeopleNum(String _uniqueCode) {
        final Function function = new Function(FUNC_GETPEOPLENUM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> test(String _uniqueCode) {
        final Function function = new Function(
                FUNC_TEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> usefund(String _uniqueCode, String _imgName, BigInteger pay) {
        final Function function = new Function(
                FUNC_USEFUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Utf8String(_imgName), 
                new org.web3j.abi.datatypes.generated.Uint256(pay)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> SaleItem(String _tokenAddress, String _uniqueCode, BigInteger _count, BigInteger _money) {
        final Function function = new Function(
                FUNC_SALEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_count), 
                new org.web3j.abi.datatypes.generated.Uint256(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static CrowdFunding load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrowdFunding(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CrowdFunding load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrowdFunding(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CrowdFunding load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CrowdFunding(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CrowdFunding load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CrowdFunding(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CrowdFunding.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CrowdFunding.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CrowdFunding.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CrowdFunding.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class CampaignCreateEventResponse extends BaseEventResponse {
        public String from;

        public String code;

        public BigInteger amount;
    }

    public static class FundingEventResponse extends BaseEventResponse {
        public String from;

        public String code;

        public BigInteger amount;
    }

    public static class FundingSuccessEventResponse extends BaseEventResponse {
        public String code;
    }

    public static class FundingFailEventResponse extends BaseEventResponse {
        public String code;
    }

    public static class DistributeEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger amount;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
