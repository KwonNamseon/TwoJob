package com.blocker.wrapper;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class CrowdFunding extends Contract {
    public static final String BINARY = "0x6080604052600061001d6100c0640100000000026401000000009004565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100c8565b600033905090565b6131cb806100d76000396000f3fe6080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806324dcb72f146100e05780632b56489814610109578063458a3b001461014b578063532a748e14610188578063801da98e146101c55780638da5cb5b146101ee578063920fb1591461021957806393fa5ec614610242578063af526b2f1461026b578063ba64f8a314610294578063cc075e09146102d1578063edf4a583146102fa578063f102a67c14610339578063f8b2cb4f14610362578063ffdd5cf11461039f575b600080fd5b3480156100ec57600080fd5b50610107600480360361010291908101906127f2565b6103df565b005b34801561011557600080fd5b50610130600480360361012b919081019061293f565b6105cf565b60405161014296959493929190612e69565b60405180910390f35b34801561015757600080fd5b50610172600480360361016d91908101906128fe565b610781565b60405161017f9190612e25565b60405180910390f35b34801561019457600080fd5b506101af60048036036101aa91908101906128fe565b6108d8565b6040516101bc9190612f51565b60405180910390f35b3480156101d157600080fd5b506101ec60048036036101e79190810190612846565b610953565b005b3480156101fa57600080fd5b50610203610c16565b6040516102109190612d6c565b60405180910390f35b34801561022557600080fd5b50610240600480360361023b9190810190612ad2565b610c3f565b005b34801561024e57600080fd5b5061026960048036036102649190810190612777565b610de5565b005b34801561027757600080fd5b50610292600480360361028d91908101906127f2565b611367565b005b3480156102a057600080fd5b506102bb60048036036102b691908101906128fe565b6115e5565b6040516102c89190612f51565b60405180910390f35b3480156102dd57600080fd5b506102f860048036036102f391908101906129ff565b61165d565b005b34801561030657600080fd5b50610321600480360361031c9190810190612993565b6119ba565b60405161033093929190612f6c565b60405180910390f35b34801561034557600080fd5b50610360600480360361035b9190810190612a7e565b611ab3565b005b34801561036e57600080fd5b506103896004803603610384919081019061274e565b612071565b6040516103969190612f51565b60405180910390f35b3480156103ab57600080fd5b506103c660048036036103c1919081019061274e565b61211f565b6040516103d69493929190612fa3565b60405180910390f35b60006005826040518082805190602001908083835b60208310151561041957805182526020820191506020810190506020830392506103f4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090506001600481111561045b57fe5b8160060160009054906101000a900460ff16600481111561047857fe5b14151561048457600080fd5b806003015481600201541115151561049b57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600301546040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161051a929190612dfc565b602060405180830381600087803b15801561053457600080fd5b505af1158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061056c91908101906128d5565b5060028160060160006101000a81548160ff0219169083600481111561058e57fe5b02179055507f1f747251ecd96060609f566d19c5e17f3ee0a54d4341d90141a6797579fa96e2826040516105c29190612e47565b60405180910390a1505050565b60606000806000806000806005896040518082805190602001908083835b60208310151561061257805182526020820191506020810190506020830392506105ed565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209050806000018160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826002015483600301548460040160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548560060160009054906101000a900460ff16858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107635780601f1061073857610100808354040283529160200191610763565b820191906000526020600020905b81548152906001019060200180831161074657829003601f168201915b50505050509550965096509650965096509650509295509295509295565b60606005826040518082805190602001908083835b6020831015156107bb5780518252602082019150602081019050602083039250610796565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600d01805480602002602001604051908101604052809291908181526020016000905b828210156108cd578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108b95780601f1061088e576101008083540402835291602001916108b9565b820191906000526020600020905b81548152906001019060200180831161089c57829003601f168201915b505050505081526020019060010190610811565b505050509050919050565b60006005826040518082805190602001908083835b60208310151561091257805182526020820191506020810190506020830392506108ed565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501805490509050919050565b61095b612234565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e290612f31565b60405180910390fd5b60006005856040518082805190602001908083835b602083101515610a255780518252602082019150602081019050602083039250610a00565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060036004811115610a6757fe5b8160060160009054906101000a900460ff166004811115610a8457fe5b141515610a9057600080fd5b828160090160008282540192505081905550600083830290508673ffffffffffffffffffffffffffffffffffffffff16633b66aad18630846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b0293929190612dc5565b602060405180830381600087803b158015610b1c57600080fd5b505af1158015610b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b5491908101906128d5565b508673ffffffffffffffffffffffffffffffffffffffff166323b872dd8630846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bae93929190612dc5565b602060405180830381600087803b158015610bc857600080fd5b505af1158015610bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c0091908101906128d5565b50610c0d8787868661223c565b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006005846040518082805190602001908083835b602083101515610c795780518252602082019150602081019050602083039250610c54565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060026004811115610cbb57fe5b8160060160009054906101000a900460ff166004811115610cd857fe5b141515610ce457600080fd5b6000816009018190555060038160060160006101000a81548160ff02191690836004811115610d0f57fe5b021790555082816008018190555081816007019080519060200190610d35929190612603565b506001600360008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fd0345c60aa523ca74849e7d52af95b50033744469eb1e1c230f1958ec6346bc884604051610dd79190612e47565b60405180910390a150505050565b60006005836040518082805190602001908083835b602083101515610e1f5780518252602082019150602081019050602083039250610dfa565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e97612234565b73ffffffffffffffffffffffffffffffffffffffff1614151515610ef0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee790612f11565b60405180910390fd5b60016004811115610efd57fe5b8160060160009054906101000a900460ff166004811115610f1a57fe5b141515610f5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5390612ef1565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16633b66aad18530856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fb593929190612dc5565b602060405180830381600087803b158015610fcf57600080fd5b505af1158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061100791908101906128d5565b508473ffffffffffffffffffffffffffffffffffffffff166323b872dd8530856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161106193929190612dc5565b602060405180830381600087803b15801561107b57600080fd5b505af115801561108f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110b391908101906128d5565b506005836040518082805190602001908083835b6020831015156110ec57805182526020820191506020810190506020830392506110c7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060050161112a612234565b90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050816005846040518082805190602001908083835b6020831015156111c657805182526020820191506020810190506020830392506111a1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008282540192505081905550816005846040518082805190602001908083835b602083101515611242578051825260208201915060208101905060208303925061121d565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004016000611282612234565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506001600260006112d7612234565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fc01ee4a877a9698da7c64514cb5fcb9c1e110a3be7ac3f0fd717d83a9ae95b63611347612234565b848460405161135893929190612d87565b60405180910390a15050505050565b60006005826040518082805190602001908083835b6020831015156113a1578051825260208201915060208101905060208303925061137c565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209050600160048111156113e357fe5b8160060160009054906101000a900460ff16600481111561140057fe5b14151561140c57600080fd5b8060020154816003015410151561142257600080fd5b600081600501805490509050600080905060008090505b82811015611580576000846005018380600101945081548110151561145a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb828760040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161151f929190612dfc565b602060405180830381600087803b15801561153957600080fd5b505af115801561154d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061157191908101906128d5565b50508080600101915050611439565b5060028360060160006101000a81548160ff021916908360048111156115a257fe5b02179055507f7df70f52aad14ff64c7ace761306e9d698d2b1f43ba53f9cc1137a975b951c36846040516115d69190612e47565b60405180910390a15050505050565b60006005826040518082805190602001908083835b60208310151561161f57805182526020820191506020810190506020830392506115fa565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600901549050919050565b6005836040518082805190602001908083835b6020831015156116955780518252602082019150602081019050602083039250611670565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661170a612234565b73ffffffffffffffffffffffffffffffffffffffff1614151561172c57600080fd5b806005846040518082805190602001908083835b6020831015156117655780518252602082019150602081019050602083039250611740565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600a01836040518082805190602001908083835b6020831015156117d157805182526020820191506020810190506020830392506117ac565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000828254019250508190555060016005846040518082805190602001908083835b60208310151561184b5780518252602082019150602081019050602083039250611826565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600c0160008282540192505081905550806005846040518082805190602001908083835b6020831015156118c757805182526020820191506020810190506020830392506118a2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600b01600082825401925050819055506005836040518082805190602001908083835b602083101515611942578051825260208201915060208101905060208303925061191d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600d018290806001815401808255809150509060018203906000526020600020016000909192909190915090805190602001906119b3929190612603565b5050505050565b6000806000806005866040518082805190602001908083835b6020831015156119f857805182526020820191506020810190506020830392506119d3565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905080600a01856040518082805190602001908083835b602083101515611a675780518252602082019150602081019050602083039250611a42565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205481600c015482600b0154935093509350509250925092565b60006004811115611ac057fe5b6005836040518082805190602001908083835b602083101515611af85780518252602082019150602081019050602083039250611ad3565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060060160009054906101000a900460ff166004811115611b4757fe5b141515611b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8090612ed1565b60405180910390fd5b816005836040518082805190602001908083835b602083101515611bc25780518252602082019150602081019050602083039250611b9d565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000019080519060200190611c0b929190612603565b50611c14612234565b6005836040518082805190602001908083835b602083101515611c4c5780518252602082019150602081019050602083039250611c27565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806005836040518082805190602001908083835b602083101515611cf95780518252602082019150602081019050602083039250611cd4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002018190555060006005836040518082805190602001908083835b602083101515611d6d5780518252602082019150602081019050602083039250611d48565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206003018190555060006005836040518082805190602001908083835b602083101515611de15780518252602082019150602081019050602083039250611dbc565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004016000611e21612234565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016005836040518082805190602001908083835b602083101515611e995780518252602082019150602081019050602083039250611e74565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060060160006101000a81548160ff02191690836004811115611eea57fe5b021790555060006005836040518082805190602001908083835b602083101515611f295780518252602082019150602081019050602083039250611f04565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600b018190555060006005836040518082805190602001908083835b602083101515611f9d5780518252602082019150602081019050602083039250611f78565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600c01819055506001806000611fe4612234565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f041828d7f84528c56a0f45c878fe07d22cabe6a744c0fe0a3d74d38a069bd044612054612234565b838360405161206593929190612d87565b60405180910390a15050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120c89190612d6c565b60206040518083038186803b1580156120e057600080fd5b505afa1580156120f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121189190810190612b51565b9050919050565b600080600080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493509350935093509193509193565b600033905090565b60006005846040518082805190602001908083835b6020831015156122765780518252602082019150602081019050602083039250612251565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060608160050180548060200260200160405190810160405280929190818152602001828054801561233157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116122e7575b50505050509050600081519050600085850290508773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646032850281151561239557fe5b046040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123cf929190612dfc565b602060405180830381600087803b1580156123e957600080fd5b505af11580156123fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061242191908101906128d5565b50600060646032830281151561243357fe5b04905060008090505b838110156125f7576000858281518110151561245457fe5b906020019060200201519050600087600301548860040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485028115156124b457fe5b0490508b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161250e929190612dfc565b602060405180830381600087803b15801561252857600080fd5b505af115801561253c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061256091908101906128d5565b506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fc1d32ad5cca423e7dda2123dbf8c482f8e77d00b631c06e903a47f2cec1334df82826040516125e0929190612dfc565b60405180910390a15050808060010191505061243c565b50505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061264457805160ff1916838001178555612672565b82800160010185558215612672579182015b82811115612671578251825591602001919060010190612656565b5b50905061267f9190612683565b5090565b6126a591905b808211156126a1576000816000905550600101612689565b5090565b90565b60006126b482356130ce565b905092915050565b60006126c882516130e0565b905092915050565b600082601f83011215156126e357600080fd5b81356126f66126f182613015565b612fe8565b9150808252602083016020830185838301111561271257600080fd5b61271d83828461313e565b50505092915050565b600061273282356130ec565b905092915050565b600061274682516130ec565b905092915050565b60006020828403121561276057600080fd5b600061276e848285016126a8565b91505092915050565b6000806000806080858703121561278d57600080fd5b600061279b878288016126a8565b94505060206127ac878288016126a8565b935050604085013567ffffffffffffffff8111156127c957600080fd5b6127d5878288016126d0565b92505060606127e687828801612726565b91505092959194509250565b6000806040838503121561280557600080fd5b6000612813858286016126a8565b925050602083013567ffffffffffffffff81111561283057600080fd5b61283c858286016126d0565b9150509250929050565b600080600080600060a0868803121561285e57600080fd5b600061286c888289016126a8565b955050602086013567ffffffffffffffff81111561288957600080fd5b612895888289016126d0565b94505060406128a6888289016126a8565b93505060606128b788828901612726565b92505060806128c888828901612726565b9150509295509295909350565b6000602082840312156128e757600080fd5b60006128f5848285016126bc565b91505092915050565b60006020828403121561291057600080fd5b600082013567ffffffffffffffff81111561292a57600080fd5b612936848285016126d0565b91505092915050565b6000806040838503121561295257600080fd5b600083013567ffffffffffffffff81111561296c57600080fd5b612978858286016126d0565b9250506020612989858286016126a8565b9150509250929050565b600080604083850312156129a657600080fd5b600083013567ffffffffffffffff8111156129c057600080fd5b6129cc858286016126d0565b925050602083013567ffffffffffffffff8111156129e957600080fd5b6129f5858286016126d0565b9150509250929050565b600080600060608486031215612a1457600080fd5b600084013567ffffffffffffffff811115612a2e57600080fd5b612a3a868287016126d0565b935050602084013567ffffffffffffffff811115612a5757600080fd5b612a63868287016126d0565b9250506040612a7486828701612726565b9150509250925092565b60008060408385031215612a9157600080fd5b600083013567ffffffffffffffff811115612aab57600080fd5b612ab7858286016126d0565b9250506020612ac885828601612726565b9150509250929050565b600080600060608486031215612ae757600080fd5b600084013567ffffffffffffffff811115612b0157600080fd5b612b0d868287016126d0565b9350506020612b1e86828701612726565b925050604084013567ffffffffffffffff811115612b3b57600080fd5b612b47868287016126d0565b9150509250925092565b600060208284031215612b6357600080fd5b6000612b718482850161273a565b91505092915050565b612b83816130f6565b82525050565b612b928161307c565b82525050565b6000612ba38261304e565b80845260208401935083602082028501612bbc85613041565b60005b84811015612bf5578383038852612bd7838351612c4b565b9250612be28261306f565b9150602088019750600181019050612bbf565b508196508694505050505092915050565b612c0f81613108565b82525050565b6000612c2082613064565b808452612c3481602086016020860161314d565b612c3d81613180565b602085010191505092915050565b6000612c5682613059565b808452612c6a81602086016020860161314d565b612c7381613180565b602085010191505092915050565b6000600782527f69734578697374000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601482527f706c65617365206d616b652063616d706169676e0000000000000000000000006020830152604082019050919050565b6000600f82527f796f75206172652063726561746f7200000000000000000000000000000000006020830152604082019050919050565b6000602082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726020830152604082019050919050565b612d66816130c4565b82525050565b6000602082019050612d816000830184612b89565b92915050565b6000606082019050612d9c6000830186612b7a565b8181036020830152612dae8185612c15565b9050612dbd6040830184612d5d565b949350505050565b6000606082019050612dda6000830186612b89565b612de76020830185612b89565b612df46040830184612d5d565b949350505050565b6000604082019050612e116000830185612b89565b612e1e6020830184612d5d565b9392505050565b60006020820190508181036000830152612e3f8184612b98565b905092915050565b60006020820190508181036000830152612e618184612c15565b905092915050565b600060c0820190508181036000830152612e838189612c15565b9050612e926020830188612b89565b612e9f6040830187612d5d565b612eac6060830186612d5d565b612eb96080830185612d5d565b612ec660a0830184612c06565b979650505050505050565b60006020820190508181036000830152612eea81612c81565b9050919050565b60006020820190508181036000830152612f0a81612cb8565b9050919050565b60006020820190508181036000830152612f2a81612cef565b9050919050565b60006020820190508181036000830152612f4a81612d26565b9050919050565b6000602082019050612f666000830184612d5d565b92915050565b6000606082019050612f816000830186612d5d565b612f8e6020830185612d5d565b612f9b6040830184612d5d565b949350505050565b6000608082019050612fb86000830187612d5d565b612fc56020830186612d5d565b612fd26040830185612d5d565b612fdf6060830184612d5d565b95945050505050565b6000604051905081810181811067ffffffffffffffff8211171561300b57600080fd5b8060405250919050565b600067ffffffffffffffff82111561302c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000613087826130a4565b9050919050565b600060058210151561309c57fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006130d9826130a4565b9050919050565b60008115159050919050565b6000819050919050565b60006131018261311a565b9050919050565b60006131138261308e565b9050919050565b60006131258261312c565b9050919050565b6000613137826130a4565b9050919050565b82818337600083830152505050565b60005b8381101561316b578082015181840152602081019050613150565b8381111561317a576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820e9f4f6fb8b4149ad80f1b9427dadda3ffb013c067dc438b54e2d3fd3cf3432e06c6578706572696d656e74616cf50037";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_CREATECAMPAIGN = "createCampaign";

    public static final String FUNC_FUNDINGCAMPIGN = "FundingCampign";

    public static final String FUNC_RECEIVEFUNDS = "receiveFunds";

    public static final String FUNC_REFUND = "Refund";

    public static final String FUNC_CREATESALE = "createSale";

    public static final String FUNC_SALEITEM = "SaleItem";

    public static final String FUNC_GETINFO = "getInfo";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETCAMPAIGN = "getCampaign";

    public static final String FUNC_GETPEOPLENUM = "getPeopleNum";

    public static final String FUNC_USEFUND = "usefund";

    public static final String FUNC_GETUSED = "getUsed";

    public static final String FUNC_GETRECEIPTIMG = "getReceiptImg";

    public static final String FUNC_GETTOTALSELL = "getTotalSell";

    public static final Event CAMPAIGNCREATE_EVENT = new Event("CampaignCreate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FUNDING_EVENT = new Event("Funding", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FUNDINGSUCCESS_EVENT = new Event("FundingSuccess", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event FUNDINGFAIL_EVENT = new Event("FundingFail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DISTRIBUTE_EVENT = new Event("Distribute", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CREATESALE_EVENT = new Event("CreateSale", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected CrowdFunding(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CrowdFunding(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CrowdFunding(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CrowdFunding(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<CampaignCreateEventResponse> getCampaignCreateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CAMPAIGNCREATE_EVENT, transactionReceipt);
        ArrayList<CampaignCreateEventResponse> responses = new ArrayList<CampaignCreateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CampaignCreateEventResponse typedResponse = new CampaignCreateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CampaignCreateEventResponse> campaignCreateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CampaignCreateEventResponse>() {
            @Override
            public CampaignCreateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CAMPAIGNCREATE_EVENT, log);
                CampaignCreateEventResponse typedResponse = new CampaignCreateEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CampaignCreateEventResponse> campaignCreateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CAMPAIGNCREATE_EVENT));
        return campaignCreateEventFlowable(filter);
    }

    public List<FundingEventResponse> getFundingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDING_EVENT, transactionReceipt);
        ArrayList<FundingEventResponse> responses = new ArrayList<FundingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingEventResponse typedResponse = new FundingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingEventResponse> fundingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingEventResponse>() {
            @Override
            public FundingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDING_EVENT, log);
                FundingEventResponse typedResponse = new FundingEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingEventResponse> fundingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDING_EVENT));
        return fundingEventFlowable(filter);
    }

    public List<FundingSuccessEventResponse> getFundingSuccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDINGSUCCESS_EVENT, transactionReceipt);
        ArrayList<FundingSuccessEventResponse> responses = new ArrayList<FundingSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingSuccessEventResponse typedResponse = new FundingSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingSuccessEventResponse> fundingSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingSuccessEventResponse>() {
            @Override
            public FundingSuccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDINGSUCCESS_EVENT, log);
                FundingSuccessEventResponse typedResponse = new FundingSuccessEventResponse();
                typedResponse.log = log;
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingSuccessEventResponse> fundingSuccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDINGSUCCESS_EVENT));
        return fundingSuccessEventFlowable(filter);
    }

    public List<FundingFailEventResponse> getFundingFailEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDINGFAIL_EVENT, transactionReceipt);
        ArrayList<FundingFailEventResponse> responses = new ArrayList<FundingFailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingFailEventResponse typedResponse = new FundingFailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingFailEventResponse> fundingFailEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingFailEventResponse>() {
            @Override
            public FundingFailEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDINGFAIL_EVENT, log);
                FundingFailEventResponse typedResponse = new FundingFailEventResponse();
                typedResponse.log = log;
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingFailEventResponse> fundingFailEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDINGFAIL_EVENT));
        return fundingFailEventFlowable(filter);
    }

    public List<DistributeEventResponse> getDistributeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DISTRIBUTE_EVENT, transactionReceipt);
        ArrayList<DistributeEventResponse> responses = new ArrayList<DistributeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DistributeEventResponse typedResponse = new DistributeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DistributeEventResponse> distributeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DistributeEventResponse>() {
            @Override
            public DistributeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DISTRIBUTE_EVENT, log);
                DistributeEventResponse typedResponse = new DistributeEventResponse();
                typedResponse.log = log;
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DistributeEventResponse> distributeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DISTRIBUTE_EVENT));
        return distributeEventFlowable(filter);
    }

    public List<CreateSaleEventResponse> getCreateSaleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATESALE_EVENT, transactionReceipt);
        ArrayList<CreateSaleEventResponse> responses = new ArrayList<CreateSaleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateSaleEventResponse typedResponse = new CreateSaleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateSaleEventResponse> createSaleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CreateSaleEventResponse>() {
            @Override
            public CreateSaleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATESALE_EVENT, log);
                CreateSaleEventResponse typedResponse = new CreateSaleEventResponse();
                typedResponse.log = log;
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreateSaleEventResponse> createSaleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATESALE_EVENT));
        return createSaleEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createCampaign(String _uniqueCode, BigInteger _fundingGoal) {
        final Function function = new Function(
                FUNC_CREATECAMPAIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_fundingGoal)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> FundingCampign(String _tokenAddress, String _from, String _uniqueCode, BigInteger _fundingValue) {
        final Function function = new Function(
                FUNC_FUNDINGCAMPIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_fundingValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receiveFunds(String _tokenAddress, String _uniqueCode) {
        final Function function = new Function(
                FUNC_RECEIVEFUNDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> Refund(String _tokenAddress, String _uniqueCode) {
        final Function function = new Function(
                FUNC_REFUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createSale(String _uniqueCode, BigInteger _money, String _image) {
        final Function function = new Function(
                FUNC_CREATESALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_money), 
                new org.web3j.abi.datatypes.Utf8String(_image)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> SaleItem(String _tokenAddress, String _uniqueCode, String buyer, BigInteger _count, BigInteger _money) {
        final Function function = new Function(
                FUNC_SALEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Address(buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_count), 
                new org.web3j.abi.datatypes.generated.Uint256(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getInfo(String target) {
        final Function function = new Function(FUNC_GETINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(target)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getBalance(String _tokenAddress) {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>> getCampaign(String _uniqueCode, String target) {
        final Function function = new Function(FUNC_GETCAMPAIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Address(target)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getPeopleNum(String _uniqueCode) {
        final Function function = new Function(FUNC_GETPEOPLENUM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> usefund(String _uniqueCode, String _imgName, BigInteger pay) {
        final Function function = new Function(
                FUNC_USEFUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Utf8String(_imgName), 
                new org.web3j.abi.datatypes.generated.Uint256(pay)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> getUsed(String _uniqueCode, String _imgName) {
        final Function function = new Function(FUNC_GETUSED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Utf8String(_imgName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getReceiptImg(String _uniqueCode) {
        final Function function = new Function(FUNC_GETRECEIPTIMG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getTotalSell(String _uniqueCode) {
        final Function function = new Function(FUNC_GETTOTALSELL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static CrowdFunding load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrowdFunding(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CrowdFunding load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrowdFunding(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CrowdFunding load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CrowdFunding(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CrowdFunding load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CrowdFunding(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CrowdFunding.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CrowdFunding.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CrowdFunding.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CrowdFunding.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class CampaignCreateEventResponse extends BaseEventResponse {
        public String from;

        public String code;

        public BigInteger amount;
    }

    public static class FundingEventResponse extends BaseEventResponse {
        public String from;

        public String code;

        public BigInteger amount;
    }

    public static class FundingSuccessEventResponse extends BaseEventResponse {
        public String code;
    }

    public static class FundingFailEventResponse extends BaseEventResponse {
        public String code;
    }

    public static class DistributeEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger amount;
    }

    public static class CreateSaleEventResponse extends BaseEventResponse {
        public String code;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
